---
date: 2017-02-26 22:10
status: public
title: 数组
---

## 数组 ##
#### 数组是一种数据结构，用来存储同一类型值的集合。通过一个整型下标可以访问数组中的每一个值。 ####
例如：如果 a 是一个整型数组，a[i]就是数组中下标为 i 的整数。
#### 在声明数组变量时，需要指出数组类型(数据元素类型紧跟[])和数组变量的名字，例如声明一个整型数组 a： ####

```java
    int[] a;//声明一个整型数组 a
    int[] a = new int[n];//声明并初始化一个可以存储 n 个整数的数组 a
```
>也可以这样声明：
>```java
    int a[]；
>```
>但是不推荐如此声明数组，因为它将类型 int[] (整型数组)与变量名分开了。

>数组的下标从 0 开始，一个含有 n 个元素的数组，其下标为 0 ~ n-1(不是 1 ~ n)。

>创建数组之后就可以给数组元素赋值了，例如：
>```java
    int[] a = new int[100];
    for (int i = 0; i < 100; i++) {
        a[i] = i;//用 0 ~ 99 填充数组 a
    }
>```

#### 创建数组时： ####
- 数字数组的所有元素都会初始化为 0
- boolean 数组的元素会初始化为 false
- 对象数组的元素则初始化为一个特殊值 null (表示这些元素还未存放任何对象)

例如下面的代码

```java
    String[] names = new String[100];
```
会创建一个包含 10 个字符串的数组，所有字符串都为 null，如果希望这个数组包含空字符串，可以为元素赋值为空字符串：

```java
    for (int i = 0; i < 10; i++) names[i] = "";
```
**注意：如果创建了一个 100 个元素的数组 a，并且识图访问元素 a[100](或任何在 0 ~ 99 之外的下标)，程序就会引发 “array index out of bounds” 异常而终止执行。**

>如果想要活得数组中的元素个数，可以试用 array.length。
>
>```java
    System.out.println("数组 a 的长度为：" + a.length);
>```
>一旦创建了数组，就不能再改变它的大小(尽管可以改变每一个数组元素)。如果需要经常在运行过程中扩展数组的大小，就应该使用另一种数据结构————数组列表（array list）

***
## 数组初始化以及匿名数组 ##
#### 创建数组对象的同时也可以赋予初始值： ####

```java
    int[] smallPrimes = {2,3,5,7,11,13};//声明数组的同时赋值
```
**注意：在使用这种语句时，不需要调用 new**

#### 还可以初始化一一个匿名的数组： ####

```java
    new int[] {12,24,23,24,31,38}
```
#### 这种表示法将创建一个新数组并利用括号中提供的值进行初始化，数组的大小就是初始值的个数，使用这种语法形式可以再不创建新变量的情况下重新初始化一个数组： ####

```java
    smallPrimes = new int[] {12,24,23,24,31,38};
```
这种写法等同于：

```java
    int[] anonymous = {12,24,23,24,31,38};
    smallPrimes = anonymous;
```
>在 Java 中，允许数组长度为 0。在编写一个记过为数组的方法时，若碰巧结果为空，则这种语法形式就显得非常有用。此时就可以创建一个长度为 0 的数组：
>
>```java
    new elementType[0]
>```
>**注意：数组长度为 0 与 null 不同。**

***
## 数组拷贝 ##
**数组是引用类型！**如果将一个数组变量赋值给另一个数组变量。这时，**两个变量将引用同一个数组**：

```java
    int[] luvkyNumbers = smallPrimes;
    luckyNumbers[5] = 12;
```
**这时，数组 smallPrimes 中第 6 个元素 smallPrimes[5] 的值也是 12。**
#### 如果希望将一个数组的所有值拷贝到一个新的数组中去，需要使用 Arrays 类的 copyOf 方法： ####

```java
    int[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luncyNumbers.length);
```
>copyOf 的第二个参数是新数组的长度。**这个方法通常用来改变数组的长度：**
>
>```java
    luckyNumbers = Arrays.copyOf(luckyNumbers, 2 * luckyNumbers.length);
>```
>上面代码将数组 luckyNumbers 的长度变为原先的两倍。

- 如果数组元素是数值型，那么多余的元素将被赋值为 0
- 如果数组元素是布尔型，那么多余的元素将被赋值为 false
- 如果长度小于原始数组的长度，则只拷贝最前面的数组元素。

***
## 数组排序 ##
#### 想要对数值型数组进行排序，可以试用 Arrays 类中的 sort 方法： ####

```java
    int[] a = new int[10000];
    ...
    Arrays.sort(a);
```

***
## 多维数组 ##
#### 实际上Java没有多维数组，只有一维数组。简单的说，Java中的多维数组就是数组的数组... ####
例如下面这个数组：

```java
    int[][] a = {
        {16,3,2,13},
        {5,10,11},
        {9,5},
        {1}
    };
    //输出 11,也就是数组 a 的第二个子数组的第三个元素(数组下标从 0 开始)
    System.out.println(a[1][2]);
```
数组 a 是一个包含 4 个元素的数组，每一个元素都是一个数组。

***
## 附：数组的常用方法 ##
>static String toString(*type*[] a)
>
- 返回包含 a 中数据元素的字符串，这些数据元素被放在括号内，并用逗号分隔。
- *参数 a：*
- *类型为 int、long、short、char、byte、boolean、float 或 double 的数组。*

> static type copyOf(*type*[] a, int length)
> static type copyOfRange(*type*[] a, int start, int end)
> 
- 返回与 a 类型相同的一个数组，其长度为 length 或者 end - start，数组元素为 a 的值
- *参数 a：类型为 int、long、short、char、byte、boolean、float 或 double 的数组。*
- *参数 start：起始下标（包含这个值）*
- *参数 end：终止下标（不包含这个值）。这个值可能大于 a.length。在这种情况下，结果为 0 或 false。*
- *参数 length：拷贝的数据元素长度。如果 length 值大于 a.length，结果为 0 或 false；否则，数组中只有前面 length 个数据元素的拷贝值。*

> static void sort(*type*[] a)
> 
- 采用优化的快速排序算法对数组进行排序。
- *参数 a：类型为 int、long、short、char、byte、boolean、float 或 double 的数组。*

> static int binarySearch(*type*[] a, *type* v)
> static int binarySearch(*type*[] a, int start, int end, *tyoe* v)
>
- 采用二分搜索算法查找值 v。如果查找成功，则返回相应的下标值；否则返回一个负数值 r。
- *参数 a：类型为 int、long、short、char、byte、boolean、float 或 double 的数组。*
- *参数 start：起始下标（包含这个值）*
- *参数 end：终止下标（不包含这个值）。*
- *参数 v：与 a 的数据元素类型相同的值。 *

> static void fill(*type*[] a, *type* v)
> 
- 将数组的所有数据元素值设置为 v。
- *参数 a：类型为 int、long、short、char、byte、boolean、float 或 double 的数组。*
- *参数 v：与 a 的数据元素类型相同的值。 *

> static boolean equals(*type*[] a, *type*[] b)
> 
- 如果两个数组大小相同，并且下标相同的元素都对应相等，则返回true。
- *参数 a、b：类型为 int、long、short、char、byte、boolean、float 或 double 的数组。*