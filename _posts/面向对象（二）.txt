---
date: 2017-03-02 09:23
status: public
title: 面向对象（二）
---

## 方法的签名 ##
####方法的签名 = 方法名 + 参数列表 ####

**要完整的描述一个方法，需要指出方法名以及参数类型。**

#### Java 规定： 

>**同一个类中** **不允许**出现两个或多个方法的签名**完全相同**(方法名相同且参数列表相同)
>但允许**同一个类中**有多个方法的**方法名相同，但参数列表不同**(重载)

## 重载 ##
#### 在Java语言中，同一个类中，方法名相同，但参数列表不同的方法叫重载。 ####
- 重载是根据参数列表来调用的，是在编译器绑定的。
- 重载与参数的变量名称无关，与参数类型、个数有关。
- 重载与返回值类型无关。

### 默认域初始化 ###
如果在构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：**数值为 0、布尔类型为 false、对象引用为 null**。
>这是域与局部变量的主要不同点。**必须明确的初始化方法中的局部变量。但是，如果没有初始化类中的域，将会被初始化为默认值（0、false 或 null）**

### 显式域初始化 ###
**可以在类定义中，直接将一个值赋给任何域**。例如：

```java
    public class Bullet() {
        private damage = 1;
        ...
    }
```

如此做会在执行构造器之前，先进行赋值操作。当一个类的所有构造器都希望把相同的值富裕某个特定的实例域时，就可以用这种方式。

>初始值不一定是常量，也可以调用方法对域进行初始化：
>
```java
    public class Bee() {
        private static int nextId;
        private int id = assignId();
        ...
        private static int assignId() {
            int r = nextId;
            nextId++;
            return r;
        }
        ...
    }
```
>上面的方法使用 assignId 方法对 Bee 类中每一个蜜蜂对象的 id 进行初始化。

## this 关键字 ##
之前说过 **this** 指的是当前类，在哪个类中使用 **this**，则 **this** 就是哪个类。
这个关键字也可以用来构造对象。如**构造器的第一个语句**形如 this(...)，则这个构造器将调用同一个类的另一个构造器：

```java
    public class Bee() {
        ...
        public Bee(int x, int y) {
            ...
        }
        public Bee() {
            this(5, 5);//必须位于构造器的第一行,这里将调用上面那个构造器
            ...
        }
    }
```

使用 this 关键字可以访问成员变量和该类的方法：

```java
    this.成员变量;//访问当前类的实例域
    this.方法名();//访问当前类的方法
```

## 初始化块 ##

前面已经讲过两种初始化实例域的方法：

- 在构造器中设置值
- 在声明中赋值

Java 还有第三种机制，**初始化块（initialization block）**

**在一个类的声明中，可以包含多个代码块，只要构造类的对象，这些块就会被执行：**

```java
    public class Bee() {
        //域
        private static int nextId;
        private int id;
        ...
        
        //初始化块
        {
            id = nextId;
            nextId++;
        }
        ...

        //构造器
        public Bee() {
            ...
        }
        public Bee(int x, int y) {
            ...
        }
        ...
    }
```

在这个示例中，无论使用哪个构造器构造对象，id 域都会在对象初始化块中被初始化。
>**调用构造器构造对象的具体步骤**:
>1. 所有数据域初始化为默认值（0、false 或 null）
>2. 按照在类声明中出现的次序，依次执行所有域的声明和显式域初始化
>3. 按照初始化块出现的次序执行初始化块
>4. 如果构造器第一行调用了另一个构造器，则执行另一个构造器主体。
>5. 执行这个构造器的主体。

#### 初始化块也可以是静态的 ####

```java
    static {
        ...
    }
```

静态初始化块只会在第一次构造该类的对象时执行，之后再构造同样对象时不再执行该静态块。**也就是静态初始化块只会执行一次。**